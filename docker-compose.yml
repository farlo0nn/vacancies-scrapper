
services:
  kafka:
    image: apache/kafka:4.0.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      - vacancies_network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - vacancies_network

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - vacancies_network

  data_collection:
    build:
      context: ./data_collection
      dockerfile: Dockerfile 
    command: >
      dockerize
        -wait tcp://postgres:5432
        -wait tcp://redis:6379
        -wait tcp://kafka:9092
        -timeout 60s
        uv run python main.py
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
    networks:
      - vacancies_network
    depends_on:
      - kafka 
      - redis 

  db_service: 
    build:
      context: ./db_service 
      dockerfile: Dockerfile 
    command: >
      dockerize
        -wait tcp://postgres:5432
        -wait tcp://redis:6379
        -wait tcp://kafka:9092
        -timeout 60s
        uv run python main.py
    networks:
      - vacancies_network
    environment:
      PG_HOST: postgres
      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      PG_PORT: 5432
      PG_DBNAME: ${POSTGRES_DB}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
    depends_on:
      - kafka
      - postgres
      - redis

  db_celery: 
    build:
      context: ./db_service 
      dockerfile: Dockerfile 
    command: >
      dockerize
        -wait tcp://redis:6379
        -wait tcp://kafka:9092
        -timeout 60s
        uv run celery -A infrastructure.celery.celery_app worker --loglevel=info
    networks:
      - vacancies_network
    environment:
      PG_HOST: postgres
      PG_USER: ${POSTGRES_USER}
      PG_PASSWORD: ${POSTGRES_PASSWORD}
      PG_PORT: 5432
      PG_DBNAME: ${POSTGRES_DB}
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis
    depends_on:
      - db_service 
      - redis 
      - kafka 

  vacancies_bot:
    build:
      context: ./vacancies_bot
      dockerfile: Dockerfile
    command: >
      dockerize
        -wait tcp://postgres:5432
        -wait tcp://redis:6379
        -wait tcp://kafka:9092
        -timeout 60s
        uv run python main.py
    networks:
      - vacancies_network
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      - kafka

networks:
  vacancies_network:
    driver: bridge 

volumes:
  db_data:
    driver: local 